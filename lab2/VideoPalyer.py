# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VideoPalyer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtCore import QTimer

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import cv2
from PyQt5.QtGui import QPixmap, QImage
from tkinter import BROWSE
import time

from datetime import datetime
from random import randint







class Ui_VideoPlayer(object):
    video_path=""
    fps=30
    def setupUi(self, VideoPlayer):
        VideoPlayer.setObjectName("VideoPlayer")
        VideoPlayer.resize(785, 562)
        VideoPlayer.setStyleSheet("background-color: rgb(174, 213, 255);")
        VideoPlayer.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(VideoPlayer)
        self.centralwidget.setObjectName("centralwidget")
        self.SpeedChanger = QtWidgets.QLabel(self.centralwidget)
        self.SpeedChanger.setGeometry(QtCore.QRect(10, 10, 761, 531))
        self.SpeedChanger.setAutoFillBackground(False)
        self.SpeedChanger.setStyleSheet("background-color: rgba(0, 0, 0,100);\n"
"border-radius: 20px;\n"
"\n"
"backdrop-filter: blur(16px) saturate(180%);\n"
"    -webkit-backdrop-filter: blur(16px) saturate(180%);\n"
"    border: 1px solid rgba(255, 255, 255, 0.125);")
        self.SpeedChanger.setText("")
        self.SpeedChanger.setObjectName("SpeedChanger")
        self.btnBrowse = QtWidgets.QPushButton(self.centralwidget)
        self.btnBrowse.setGeometry(QtCore.QRect(490, 80, 81, 31))
        self.btnBrowse.setStyleSheet("QPushButton#btnBrowse{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(66, 135, 245, 255), stop:0.05 rgba(66, 135, 245, 255), stop:0.36 rgba(66, 135, 245, 255), stop:0.6 rgba(66, 135, 245, 255), stop:0.75 rgba(66, 135, 245, 255), stop:0.79 rgba(66, 135,245, 255), stop:0.86 rgba(66, 136, 245, 255), stop:0.935 rgba(66, 135, 245, 255));\n"
"border:none;\n"
"color:white;\n"
"}\n"
"QPushButton#btnBrowse:hover{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(36, 59, 97, 255), stop:1 rgba(36, 59, 97, 255));\n"
"border:none;\n"
"color:white;\n"
"\n"
"}\n"
"\n"
"QPushButton#btnBrowse:rgb(0, 85, 255)pressed{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(17, 54, 25, 255), stop:1 rgba(17, 54, 25, 255));\n"
"border:none;\n"
"color:white;\n"
"}")
        self.btnBrowse.setFlat(False)
        self.btnBrowse.setObjectName("btnBrowse")
        self.comboBoxAppType = QtWidgets.QComboBox(self.centralwidget)
        self.comboBoxAppType.setGeometry(QtCore.QRect(610, 80, 141, 31))
        self.comboBoxAppType.setAutoFillBackground(False)
        self.comboBoxAppType.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"border: none;\n"
"border-bottom: 2px solid rgb(255,255,255);\n"
"padding-bottom:7px;\n"
"color: rgb(255,255,255);")
        self.comboBoxAppType.setEditable(False)
        self.comboBoxAppType.setObjectName("comboBoxAppType")
        self.comboBoxAppType.addItem("Choose")
        self.comboBoxAppType.addItem("")
        self.comboBoxAppType.addItem("")
        
        self.comboBoxAppType.currentTextChanged.connect(self.check_selected_item)
        

        self.Speedslider = QtWidgets.QSlider(self.centralwidget)
        self.Speedslider.setGeometry(QtCore.QRect(130, 450, 160, 22))
        self.Speedslider.setMinimumSize(QtCore.QSize(160, 0))
        self.Speedslider.setMaximumSize(QtCore.QSize(160, 22))
        self.Speedslider.setStyleSheet("background-color: rgb(106, 129, 155);")
        self.Speedslider.setMinimum(-2)
        self.Speedslider.setMaximum(2)
        self.Speedslider.setPageStep(1)
        self.Speedslider.setOrientation(QtCore.Qt.Horizontal)
        self.Speedslider.setObjectName("Speedslider")
        self.Speedslider.valueChanged.connect(self.slider_value_changed)
        self.MainHeadinglbl = QtWidgets.QLabel(self.centralwidget)
        self.MainHeadinglbl.setGeometry(QtCore.QRect(330, 20, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.MainHeadinglbl.setFont(font)
        self.MainHeadinglbl.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.MainHeadinglbl.setObjectName("MainHeadinglbl")
        self.Speedlbl = QtWidgets.QLabel(self.centralwidget)
        self.Speedlbl.setGeometry(QtCore.QRect(70, 450, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Speedlbl.setFont(font)
        self.Speedlbl.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.Speedlbl.setObjectName("Speedlbl")
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setGeometry(QtCore.QRect(660, 190, 22, 211))
        self.verticalSlider.setStyleSheet("background-color: rgb(106, 129, 155);")
        self.verticalSlider.setMaximum(3)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.Speedlbl_2 = QtWidgets.QLabel(self.centralwidget)
        self.Speedlbl_2.setGeometry(QtCore.QRect(690, 270, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Speedlbl_2.setFont(font)
        self.Speedlbl_2.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.Speedlbl_2.setObjectName("Speedlbl_2")
        self.lblDataSource = QtWidgets.QLabel(self.centralwidget)
        self.lblDataSource.setGeometry(QtCore.QRect(40, 90, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lblDataSource.setFont(font)
        self.lblDataSource.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"color :#FFF8EA\n"
"")
        self.lblDataSource.setObjectName("lblDataSource")
        self.txtbxDataSource = QtWidgets.QLineEdit(self.centralwidget)
        self.txtbxDataSource.setGeometry(QtCore.QRect(160, 90, 321, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtbxDataSource.setFont(font)
        self.txtbxDataSource.setStyleSheet("background-color :#FFF8EA")
        self.txtbxDataSource.setObjectName("txtbxDataSource")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 180, 541, 241))
        self.label.setMinimumSize(QtCore.QSize(0, 221))
        self.label.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label.setText("")
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setPixmap(QtGui.QPixmap(""))
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.btnRefresh = QtWidgets.QPushButton(self.centralwidget)
        self.btnRefresh.setGeometry(QtCore.QRect(540, 150, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnRefresh.setFont(font)
        self.btnRefresh.setStyleSheet("QPushButton#btnRefresh {\n"
"    background-color:#fdfd00; /* Change to yellow */\n"
"    border: none;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton#btnRefresh:hover{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(36, 59, 97, 255), stop:1 rgba(36, 59, 97, 255));\n"
"border:none;\n"
"color:white;\n"
"\n"
"}\n"
"QPushButton#btnRefresh:pressed {\n"
"    background-color: yellow; /* Change to yellow */\n"
"    border: none;\n"
"    color: black;\n"
"}\n"
"")        
        

        
        self.video_timer = QTimer()
        self.video_timer.timeout.connect(self.update_frame)

        self.btnBrowse.clicked.connect(self.browseFile)
        self.btnRefresh.setAutoDefault(True)
        self.btnRefresh.setObjectName("btnRefresh")
        self.rdbtnSort = QtWidgets.QRadioButton(self.centralwidget)
        self.rdbtnSort.setGeometry(QtCore.QRect(640, 450, 91, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.rdbtnSort.setFont(font)
        self.rdbtnSort.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("webcam.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rdbtnSort.setIcon(icon)
        self.rdbtnSort.setObjectName("rdbtnSort")
        VideoPlayer.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(VideoPlayer)
        self.statusbar.setObjectName("statusbar")
        VideoPlayer.setStatusBar(self.statusbar)



        self.retranslateUi(VideoPlayer)


   
        QtCore.QMetaObject.connectSlotsByName(VideoPlayer)


    def slider_value_changed(self, value):
        # Update label text with slider value
        

        if value==0 :
            self.fps=30
        elif value==-1:
           self.fps=45
        elif value==-2:
            self.fps=60
        elif value==1:
            self.fps=15
        elif value==2:
            self.fps=0          
       

    def check_selected_item(self, text):
        if text == "Web Cam":
            self.rdbtnSort.setChecked(True)
            self.video_path=""
            x=self.capture_video(10);
            self.video_path=x
            if self.video_path:
            # Load the video using OpenCV
                self.video_capture = cv2.VideoCapture(self.video_path)

            # Start the timer to update frames
                self.video_timer.start(100)
            
           
        elif text == "Browse Video":
            self.browseFile()
            self.rdbtnSort.setChecked(False)

    def capture_video(self,duration):
      cap = cv2.VideoCapture(0)  # Open the webcam
      fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec for saving the video
      now = datetime.now()
      current_time = now.strftime("%H-%M-%S")
      video_filename = f"captured_video_{current_time}.avi"  # Generate unique video filename
    
      out = cv2.VideoWriter(video_filename, fourcc, 20.0, (640, 480))  # Video writer object

      start_time = cv2.getTickCount()  # Get the initial time

      while(cap.isOpened()):
          ret, frame = cap.read()  # Read frame from the webcam
          if ret==True:
             out.write(frame)  # Write the frame to the video file

            # Display the frame
             cv2.imshow('frame', frame)

            # Check if the specified duration has elapsed
          if (cv2.getTickCount() - start_time) / cv2.getTickFrequency() > duration:
                break

            # Exit when 'q' is pressed
          if cv2.waitKey(1) & 0xFF == ord('q'):
                break
          else:
             break

      cap.release()  # Release the webcam
      out.release()  # Release the video writer
      cv2.destroyAllWindows()  # Close all OpenCV windows
    
      return video_filename  # Return the path of the saved video
   
                
         
    def browseFile(self):
        file_dialog = QFileDialog()
        video_path, _ = file_dialog.getOpenFileName(None, "Open Video File", "", "Video Files (*.mp4 *.avi *.mkv)")
        self.txtbxDataSource.setText(video_path[0])
        if video_path:
            # Load the video using OpenCV
            self.video_capture = cv2.VideoCapture(video_path)

            # Start the timer to update frames
            self.video_timer.start(self.fps)  # Update every 33 milliseconds (approximately 30 fps)

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VideoPalyer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtCore import QTimer

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import cv2
from PyQt5.QtGui import QPixmap, QImage
from tkinter import BROWSE
import time

from datetime import datetime
from random import randint







class Ui_VideoPlayer(object):
    video_path=""
    fps=30
    def setupUi(self, VideoPlayer):
        VideoPlayer.setObjectName("VideoPlayer")
        VideoPlayer.resize(785, 562)
        VideoPlayer.setStyleSheet("background-color: rgb(174, 213, 255);")
        VideoPlayer.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(VideoPlayer)
        self.centralwidget.setObjectName("centralwidget")
        self.SpeedChanger = QtWidgets.QLabel(self.centralwidget)
        self.SpeedChanger.setGeometry(QtCore.QRect(10, 10, 761, 531))
        self.SpeedChanger.setAutoFillBackground(False)
        self.SpeedChanger.setStyleSheet("background-color: rgba(0, 0, 0,100);\n"
"border-radius: 20px;\n"
"\n"
"backdrop-filter: blur(16px) saturate(180%);\n"
"    -webkit-backdrop-filter: blur(16px) saturate(180%);\n"
"    border: 1px solid rgba(255, 255, 255, 0.125);")
        self.SpeedChanger.setText("")
        self.SpeedChanger.setObjectName("SpeedChanger")
        self.btnBrowse = QtWidgets.QPushButton(self.centralwidget)
        self.btnBrowse.setGeometry(QtCore.QRect(490, 80, 81, 31))
        self.btnBrowse.setStyleSheet("QPushButton#btnBrowse{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(66, 135, 245, 255), stop:0.05 rgba(66, 135, 245, 255), stop:0.36 rgba(66, 135, 245, 255), stop:0.6 rgba(66, 135, 245, 255), stop:0.75 rgba(66, 135, 245, 255), stop:0.79 rgba(66, 135,245, 255), stop:0.86 rgba(66, 136, 245, 255), stop:0.935 rgba(66, 135, 245, 255));\n"
"border:none;\n"
"color:white;\n"
"}\n"
"QPushButton#btnBrowse:hover{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(36, 59, 97, 255), stop:1 rgba(36, 59, 97, 255));\n"
"border:none;\n"
"color:white;\n"
"\n"
"}\n"
"\n"
"QPushButton#btnBrowse:rgb(0, 85, 255)pressed{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(17, 54, 25, 255), stop:1 rgba(17, 54, 25, 255));\n"
"border:none;\n"
"color:white;\n"
"}")
        self.btnBrowse.setFlat(False)
        self.btnBrowse.setObjectName("btnBrowse")
        self.comboBoxAppType = QtWidgets.QComboBox(self.centralwidget)
        self.comboBoxAppType.setGeometry(QtCore.QRect(610, 80, 141, 31))
        self.comboBoxAppType.setAutoFillBackground(False)
        self.comboBoxAppType.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"border: none;\n"
"border-bottom: 2px solid rgb(255,255,255);\n"
"padding-bottom:7px;\n"
"color: rgb(255,255,255);")
        self.comboBoxAppType.setEditable(False)
        self.comboBoxAppType.setObjectName("comboBoxAppType")
        self.comboBoxAppType.addItem("Choose")
        self.comboBoxAppType.addItem("")
        self.comboBoxAppType.addItem("")
        
        self.comboBoxAppType.currentTextChanged.connect(self.check_selected_item)
        

        self.Speedslider = QtWidgets.QSlider(self.centralwidget)
        self.Speedslider.setGeometry(QtCore.QRect(130, 450, 160, 22))
        self.Speedslider.setMinimumSize(QtCore.QSize(160, 0))
        self.Speedslider.setMaximumSize(QtCore.QSize(160, 22))
        self.Speedslider.setStyleSheet("background-color: rgb(106, 129, 155);")
        self.Speedslider.setMinimum(-2)
        self.Speedslider.setMaximum(2)
        self.Speedslider.setPageStep(1)
        self.Speedslider.setOrientation(QtCore.Qt.Horizontal)
        self.Speedslider.setObjectName("Speedslider")
        self.Speedslider.valueChanged.connect(self.slider_value_changed)
        self.MainHeadinglbl = QtWidgets.QLabel(self.centralwidget)
        self.MainHeadinglbl.setGeometry(QtCore.QRect(330, 20, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.MainHeadinglbl.setFont(font)
        self.MainHeadinglbl.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.MainHeadinglbl.setObjectName("MainHeadinglbl")
        self.Speedlbl = QtWidgets.QLabel(self.centralwidget)
        self.Speedlbl.setGeometry(QtCore.QRect(70, 450, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Speedlbl.setFont(font)
        self.Speedlbl.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.Speedlbl.setObjectName("Speedlbl")
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setGeometry(QtCore.QRect(660, 190, 22, 211))
        self.verticalSlider.setStyleSheet("background-color: rgb(106, 129, 155);")
        self.verticalSlider.setMaximum(3)
        self.verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.Speedlbl_2 = QtWidgets.QLabel(self.centralwidget)
        self.Speedlbl_2.setGeometry(QtCore.QRect(690, 270, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Speedlbl_2.setFont(font)
        self.Speedlbl_2.setStyleSheet("color : rgb(255,255,255);\n"
"background-color: rgb(106, 129, 155);")
        self.Speedlbl_2.setObjectName("Speedlbl_2")
        self.lblDataSource = QtWidgets.QLabel(self.centralwidget)
        self.lblDataSource.setGeometry(QtCore.QRect(40, 90, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lblDataSource.setFont(font)
        self.lblDataSource.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"color :#FFF8EA\n"
"")
        self.lblDataSource.setObjectName("lblDataSource")
        self.txtbxDataSource = QtWidgets.QLineEdit(self.centralwidget)
        self.txtbxDataSource.setGeometry(QtCore.QRect(160, 90, 321, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtbxDataSource.setFont(font)
        self.txtbxDataSource.setStyleSheet("background-color :#FFF8EA")
        self.txtbxDataSource.setObjectName("txtbxDataSource")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 180, 541, 241))
        self.label.setMinimumSize(QtCore.QSize(0, 221))
        self.label.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label.setText("")
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setPixmap(QtGui.QPixmap(""))
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setOpenExternalLinks(False)
        self.label.setObjectName("label")
        self.btnRefresh = QtWidgets.QPushButton(self.centralwidget)
        self.btnRefresh.setGeometry(QtCore.QRect(540, 150, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btnRefresh.setFont(font)
        self.btnRefresh.setStyleSheet("QPushButton#btnRefresh {\n"
"    background-color:#fdfd00; /* Change to yellow */\n"
"    border: none;\n"
"    color: black;\n"
"}\n"
"\n"
"QPushButton#btnRefresh:hover{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(36, 59, 97, 255), stop:1 rgba(36, 59, 97, 255));\n"
"border:none;\n"
"color:white;\n"
"\n"
"}\n"
"QPushButton#btnRefresh:pressed {\n"
"    background-color: yellow; /* Change to yellow */\n"
"    border: none;\n"
"    color: black;\n"
"}\n"
"")        
        

        
        self.video_timer = QTimer()
        self.video_timer.timeout.connect(self.update_frame)

        self.btnBrowse.clicked.connect(self.browseFile)
        self.btnRefresh.setAutoDefault(True)
        self.btnRefresh.setObjectName("btnRefresh")
        self.rdbtnSort = QtWidgets.QRadioButton(self.centralwidget)
        self.rdbtnSort.setGeometry(QtCore.QRect(640, 450, 91, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.rdbtnSort.setFont(font)
        self.rdbtnSort.setStyleSheet("background-color: rgb(106, 129, 155);\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("webcam.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rdbtnSort.setIcon(icon)
        self.rdbtnSort.setObjectName("rdbtnSort")
        VideoPlayer.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(VideoPlayer)
        self.statusbar.setObjectName("statusbar")
        VideoPlayer.setStatusBar(self.statusbar)



        self.retranslateUi(VideoPlayer)


   
        QtCore.QMetaObject.connectSlotsByName(VideoPlayer)


    def slider_value_changed(self, value):
        # Update label text with slider value
        

        if value==0 :
            self.fps=30
        elif value==-1:
           self.fps=45
        elif value==-2:
            self.fps=60
        elif value==1:
            self.fps=15
        elif value==2:
            self.fps=0          
       

    def check_selected_item(self, text):
        if text == "Web Cam":
            self.rdbtnSort.setChecked(True)
            self.video_path=""
            x=self.capture_video(10);
            self.video_path=x
            if self.video_path:
            # Load the video using OpenCV
                self.video_capture = cv2.VideoCapture(self.video_path)

            # Start the timer to update frames
                self.video_timer.start(100)
            
           
        elif text == "Browse Video":
            self.browseFile()
            self.rdbtnSort.setChecked(False)

    def capture_video(self,duration):
      cap = cv2.VideoCapture(0)  # Open the webcam
      fourcc = cv2.VideoWriter_fourcc(*'XVID')  # Codec for saving the video
      now = datetime.now()
      current_time = now.strftime("%H-%M-%S")
      video_filename = f"captured_video_{current_time}.avi"  # Generate unique video filename
    
      out = cv2.VideoWriter(video_filename, fourcc, 20.0, (640, 480))  # Video writer object

      start_time = cv2.getTickCount()  # Get the initial time

      while(cap.isOpened()):
          ret, frame = cap.read()  # Read frame from the webcam
          if ret==True:
             out.write(frame)  # Write the frame to the video file

            # Display the frame
             cv2.imshow('frame', frame)

            # Check if the specified duration has elapsed
          if (cv2.getTickCount() - start_time) / cv2.getTickFrequency() > duration:
                break

            # Exit when 'q' is pressed
          if cv2.waitKey(1) & 0xFF == ord('q'):
                break
          else:
             break

      cap.release()  # Release the webcam
      out.release()  # Release the video writer
      cv2.destroyAllWindows()  # Close all OpenCV windows
    
      return video_filename  # Return the path of the saved video
   
                
         
    def browseFile(self):
        file_dialog = QFileDialog()
        video_path, _ = file_dialog.getOpenFileName(None, "Open Video File", "", "Video Files (*.mp4 *.avi *.mkv)")

        if video_path:
            # Load the video using OpenCV
            self.video_capture = cv2.VideoCapture(video_path)

            # Start the timer to update frames
            self.video_timer.start(self.fps)  # Update every 33 milliseconds (approximately 30 fps)

    def update_frame(self):
        # Read frame from the video
        success, frame = self.video_capture.read()
        frame_rgb = ''
        if success:
            # Convert the frame to RGB format
              color_value = self.verticalSlider.value()

              if color_value == 3:  # Red
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_rgb[:, :, 1:] = 0  # Set green and blue channels to 0

              elif color_value == 2:  # Green
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_rgb[:, :, (0, 2)] = 0  # Set red and blue channels to 0

              elif color_value ==1:  # Blue
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame_rgb[:, :, :2] = 0  # Set red and green channels to 0

              elif color_value == 0:  # simple
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Convert the frame to QImage
              image = QImage(frame_rgb, frame_rgb.shape[1], frame_rgb.shape[0], QImage.Format_RGB888)

            # Convert QImage to QPixmap
              pixmap = QPixmap.fromImage(image)

            # Resize the pixmap to fit the label
              pixmap = pixmap.scaled(self.label.size(), QtCore.Qt.KeepAspectRatio)

            # Set the pixmap to the label
              self.label.setPixmap(pixmap)
        else:
            # Stop the timer when the video ends
            self.video_timer.stop()
            self.video_capture.release()
            print("Video ended.")


    def retranslateUi(self, VideoPlayer):
        _translate = QtCore.QCoreApplication.translate
        VideoPlayer.setWindowTitle(_translate("VideoPlayer", "MainWindow"))
        self.btnBrowse.setText(_translate("VideoPlayer", "Browse"))
        self.comboBoxAppType.setCurrentText(_translate("VideoPlayer", "Browse Video"))
        self.comboBoxAppType.setItemText(0, _translate("VideoPlayer", "Browse Video"))
        self.comboBoxAppType.setItemText(1, _translate("VideoPlayer", "Web Cam"))
        self.MainHeadinglbl.setText(_translate("VideoPlayer", "Video Player"))
        self.Speedlbl.setText(_translate("VideoPlayer", "Speed"))
        self.Speedlbl_2.setText(_translate("VideoPlayer", "Grey Scale"))
        self.lblDataSource.setText(_translate("VideoPlayer", "Data Source :"))
        self.btnRefresh.setText(_translate("VideoPlayer", "Refresh"))
        self.rdbtnSort.setText(_translate("VideoPlayer", "Webcam"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VideoPlayer = QtWidgets.QMainWindow()
    ui = Ui_VideoPlayer()
    ui.setupUi(VideoPlayer)
    VideoPlayer.show()
    sys.exit(app.exec_())


    def retranslateUi(self, VideoPlayer):
        _translate = QtCore.QCoreApplication.translate
        VideoPlayer.setWindowTitle(_translate("VideoPlayer", "MainWindow"))
        self.btnBrowse.setText(_translate("VideoPlayer", "Browse"))
        self.comboBoxAppType.setCurrentText(_translate("VideoPlayer", "Browse Video"))
        self.comboBoxAppType.setItemText(0, _translate("VideoPlayer", "Browse Video"))
        self.comboBoxAppType.setItemText(1, _translate("VideoPlayer", "Web Cam"))
        self.MainHeadinglbl.setText(_translate("VideoPlayer", "Video Player"))
        self.Speedlbl.setText(_translate("VideoPlayer", "Speed"))
        self.Speedlbl_2.setText(_translate("VideoPlayer", "Grey Scale"))
        self.lblDataSource.setText(_translate("VideoPlayer", "Data Source :"))
        self.btnRefresh.setText(_translate("VideoPlayer", "Refresh"))
        self.rdbtnSort.setText(_translate("VideoPlayer", "Webcam"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    VideoPlayer = QtWidgets.QMainWindow()
    ui = Ui_VideoPlayer()
    ui.setupUi(VideoPlayer)
    VideoPlayer.show()
    sys.exit(app.exec_())
